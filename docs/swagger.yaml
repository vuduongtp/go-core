basePath: /
definitions:
  AuthToken:
    properties:
      access_token:
        type: string
      expires_in:
        type: integer
      refresh_token:
        type: string
      token_type:
        type: string
    type: object
  Country:
    properties:
      code:
        type: string
      created_at:
        description: The time that record is created
        type: string
      deleted_at:
        allOf:
        - $ref: '#/definitions/gorm.DeletedAt'
        description: DeletedAt *time.Time `json:"deleted_at" sql:"index"`
      id:
        description: ID of the record
        type: integer
      name:
        type: string
      phone_code:
        type: string
      updated_at:
        description: The latest time that record is updated
        type: string
    type: object
  ErrorResponse:
    properties:
      code:
        type: integer
      message:
        type: string
      type:
        type: string
    type: object
  SwaggErrDetailsResp:
    properties:
      error:
        $ref: '#/definitions/ErrorResponse'
    type: object
  SwaggOKResp:
    type: object
  User:
    properties:
      blocked:
        type: boolean
      created_at:
        description: The time that record is created
        type: string
      deleted_at:
        allOf:
        - $ref: '#/definitions/gorm.DeletedAt'
        description: DeletedAt *time.Time `json:"deleted_at" sql:"index"`
      email:
        type: string
      first_name:
        type: string
      id:
        description: ID of the record
        type: integer
      last_login:
        type: string
      last_name:
        type: string
      mobile:
        type: string
      role:
        type: string
      updated_at:
        description: The latest time that record is updated
        type: string
      username:
        type: string
    type: object
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  internal_api_auth.Credentials:
    properties:
      password:
        example: superadmin123!@#
        type: string
      username:
        example: superadmin
        type: string
    required:
    - password
    - username
    type: object
  internal_api_auth.RefreshTokenData:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  internal_api_country.CreationData:
    properties:
      code:
        description: 'example: vn'
        maxLength: 10
        minLength: 2
        type: string
      name:
        description: 'example: Vietnam'
        minLength: 3
        type: string
      phone_code:
        description: 'example: +84'
        maxLength: 10
        minLength: 2
        type: string
    required:
    - code
    - name
    - phone_code
    type: object
  internal_api_country.ListResp:
    properties:
      data:
        description: 'example: [{"id": 1, "created_at": "2020-01-14T10:03:41Z", "updated_at":
          "2020-01-14T10:03:41Z", "name": "Singapore", "code": "SG", "phone_code":
          "+65"}]'
        items:
          $ref: '#/definitions/Country'
        type: array
      total_count:
        description: 'example: 1'
        type: integer
    type: object
  internal_api_country.UpdateData:
    properties:
      code:
        description: 'example: vn'
        maxLength: 10
        minLength: 2
        type: string
      name:
        description: 'example: Vietnam'
        minLength: 3
        type: string
      phone_code:
        description: 'example: +84'
        maxLength: 10
        minLength: 2
        type: string
    type: object
  internal_api_user.CreationData:
    properties:
      blocked:
        type: boolean
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      mobile:
        type: string
      password:
        minLength: 8
        type: string
      role:
        type: string
      username:
        minLength: 3
        type: string
    required:
    - email
    - first_name
    - last_name
    - mobile
    - password
    - role
    - username
    type: object
  internal_api_user.ListResp:
    properties:
      data:
        items:
          $ref: '#/definitions/User'
        type: array
      total_count:
        type: integer
    type: object
  internal_api_user.PasswordChangeData:
    properties:
      new_password:
        minLength: 8
        type: string
      new_password_confirm:
        type: string
      old_password:
        type: string
    required:
    - new_password
    - new_password_confirm
    - old_password
    type: object
  internal_api_user.UpdateData:
    properties:
      blocked:
        type: boolean
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      mobile:
        type: string
      role:
        type: string
    type: object
info:
  contact:
    email: vuduongcalvin@gmail.com
    name: DuongVu
    url: http://www.swagger.io/support
  description: This is a sample server Core server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: GoCore Example API
  version: "1.0"
paths:
  /login:
    post:
      consumes:
      - application/json
      description: Logs in user by username and password
      operationId: authLogin
      parameters:
      - description: Credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/internal_api_auth.Credentials'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/AuthToken'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/SwaggErrDetailsResp'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/SwaggErrDetailsResp'
      summary: Logs in user by username and password
      tags:
      - auth
  /refresh-token:
    post:
      consumes:
      - application/json
      description: Refresh access token
      operationId: authRefreshToken
      parameters:
      - description: RefreshTokenData
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/internal_api_auth.RefreshTokenData'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/AuthToken'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/SwaggErrDetailsResp'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/SwaggErrDetailsResp'
      summary: Refresh access token
      tags:
      - auth
  /v1/countries:
    get:
      consumes:
      - application/json
      description: Get list country
      operationId: countriesList
      parameters:
      - description: 'JSON string of filter. E.g: {"field_name":"value"}'
        in: query
        name: f
        type: string
      - default: 25
        description: Number of records per page
        in: query
        name: l
        type: integer
      - default: ASC
        description: Sort direction order must be one of ASC, DESC
        enum:
        - ASC
        - DESC
        in: query
        name: o
        type: string
      - default: 1
        description: Current page number
        in: query
        name: p
        type: integer
      - description: Field name for sorting
        in: query
        name: s
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/internal_api_country.ListResp'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/SwaggErrDetailsResp'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/SwaggErrDetailsResp'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/SwaggErrDetailsResp'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/SwaggErrDetailsResp'
      security:
      - BearerToken: []
      summary: Get list country
      tags:
      - countries
    post:
      consumes:
      - application/json
      description: Creates new country
      operationId: countriesCreate
      parameters:
      - description: CreationData
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/internal_api_country.CreationData'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/AuthToken'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/SwaggErrDetailsResp'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/SwaggErrDetailsResp'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/SwaggErrDetailsResp'
      security:
      - BearerToken: []
      summary: Creates new country
      tags:
      - countries
  /v1/countries/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes an country
      operationId: countriesDelete
      parameters:
      - description: Country ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/SwaggOKResp'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/SwaggErrDetailsResp'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/SwaggErrDetailsResp'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/SwaggErrDetailsResp'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/SwaggErrDetailsResp'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/SwaggErrDetailsResp'
      security:
      - BearerToken: []
      summary: Deletes an country
      tags:
      - countries
    get:
      consumes:
      - application/json
      description: Returns a single country
      operationId: countriesView
      parameters:
      - description: Country ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Country'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/SwaggErrDetailsResp'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/SwaggErrDetailsResp'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/SwaggErrDetailsResp'
      security:
      - BearerToken: []
      summary: Returns a single country
      tags:
      - countries
    patch:
      consumes:
      - application/json
      description: Updates country information
      operationId: countriesUpdate
      parameters:
      - description: Country ID
        in: path
        name: id
        required: true
        type: integer
      - description: UpdateData
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/internal_api_country.UpdateData'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Country'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/SwaggErrDetailsResp'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/SwaggErrDetailsResp'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/SwaggErrDetailsResp'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/SwaggErrDetailsResp'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/SwaggErrDetailsResp'
      security:
      - BearerToken: []
      summary: Updates country information
      tags:
      - countries
  /v1/users:
    get:
      consumes:
      - application/json
      description: Get list user
      operationId: usersList
      parameters:
      - description: 'JSON string of filter. E.g: {"field_name":"value"}'
        in: query
        name: f
        type: string
      - default: 25
        description: Number of records per page
        in: query
        name: l
        type: integer
      - default: ASC
        description: Sort direction order must be one of ASC, DESC
        enum:
        - ASC
        - DESC
        in: query
        name: o
        type: string
      - default: 1
        description: Current page number
        in: query
        name: p
        type: integer
      - description: Field name for sorting
        in: query
        name: s
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/internal_api_user.ListResp'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/SwaggErrDetailsResp'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/SwaggErrDetailsResp'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/SwaggErrDetailsResp'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/SwaggErrDetailsResp'
      security:
      - BearerToken: []
      summary: Get list user
      tags:
      - users
    post:
      consumes:
      - application/json
      description: The new user
      operationId: usersCreate
      parameters:
      - description: CreationData
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/internal_api_user.CreationData'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/SwaggErrDetailsResp'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/SwaggErrDetailsResp'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/SwaggErrDetailsResp'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/SwaggErrDetailsResp'
      security:
      - BearerToken: []
      summary: Creates new user
      tags:
      - users
  /v1/users/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes an user
      operationId: usersDelete
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/SwaggOKResp'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/SwaggErrDetailsResp'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/SwaggErrDetailsResp'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/SwaggErrDetailsResp'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/SwaggErrDetailsResp'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/SwaggErrDetailsResp'
      security:
      - BearerToken: []
      summary: Deletes an user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Returns a single user
      operationId: usersView
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/SwaggErrDetailsResp'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/SwaggErrDetailsResp'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/SwaggErrDetailsResp'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/SwaggErrDetailsResp'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/SwaggErrDetailsResp'
      security:
      - BearerToken: []
      summary: Returns a single user
      tags:
      - users
    patch:
      consumes:
      - application/json
      description: Updates user information
      operationId: usersUpdate
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: UpdateData
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/internal_api_user.UpdateData'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/SwaggErrDetailsResp'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/SwaggErrDetailsResp'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/SwaggErrDetailsResp'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/SwaggErrDetailsResp'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/SwaggErrDetailsResp'
      security:
      - BearerToken: []
      summary: Updates user information
      tags:
      - users
  /v1/users/me:
    get:
      consumes:
      - application/json
      description: Returns authenticated user
      operationId: usersMe
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/SwaggErrDetailsResp'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/SwaggErrDetailsResp'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/SwaggErrDetailsResp'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/SwaggErrDetailsResp'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/SwaggErrDetailsResp'
      security:
      - BearerToken: []
      summary: Returns authenticated user
      tags:
      - users
  /v1/users/password:
    get:
      consumes:
      - application/json
      description: Changes authenticated user password
      operationId: usersChangePwd
      parameters:
      - description: PasswordChangeData
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/internal_api_user.PasswordChangeData'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/SwaggOKResp'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/SwaggErrDetailsResp'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/SwaggErrDetailsResp'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/SwaggErrDetailsResp'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/SwaggErrDetailsResp'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/SwaggErrDetailsResp'
      security:
      - BearerToken: []
      summary: Changes authenticated user password
      tags:
      - users
schemes:
- http
- https
securityDefinitions:
  BearerToken:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
